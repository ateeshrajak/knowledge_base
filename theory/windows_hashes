# Windows Hashes

References [1] [2]

[1]: (https://medium.com/@petergombos/lm-ntlm-net-ntlmv2-oh-my-a9b235c58ed4)
[2]: (https://byt3bl33d3r.github.io/practical-guide-to-ntlm-relaying-in-2017-aka-getting-a-foothold-in-under-5-minutes.html)

## Initial Considerations

- NTLMv1/v2 is a shorthand for Net-NTLMv1/v2 and hence are the same thing.

NTLM hashes are stored in the Security Account Manager (SAM) database
and in Domain Controller's NTDS.dit database. They look like this:

`aad3b435b51404eeaad3b435b51404ee:e19ccf75ee54e06b06a5907af13cef42`

Contrary to the name, the LM hash is the one before the semicolon
and the NT hash is the one after the semicolon.
Starting with Windows Vista and Windows Server 2008, by default, only
the NT hash is stored.

Net-NTLM hashes are used for network authentication (they are derived
from a challenge/response algorithm and are based on the user's NT
hash).


From an attacker perspective:
- We CAN perform Pass-The-Hash attacks with NTLM hashes;
- We CANNOT perform Pass-The-Hash attacks with Net-NTLM hashes;

In general we get NTLM hashes by dumping the SAM database or
the NTDS.dit file on Domain Controllers or using tools as *mimikatz*.
While we can steal Net-NTLM hashes by performing MiTM attacks
using *responder* or *inveigh*.


## LM Hashes

LM Hases are the oldest password storage technique used by Microsoft
Systems.  They are rarely found on modern system, but we can still find
these hashes on network with old/legacy Microsoft machines.

These can be obtained:
- dumping the SAM database on a workstation;
- dumping the NTDS file on the Domain Controllers;

LM was turned off by default starting in Windows Vista/Server 2008,
but might still be present in a network if there older systems are still
used. It is possible to enable it in later versions through a GPO setting.

When dumping the SAM/NTDS database, they are shown together with the
NTHash, before the colon.

The algorithm to obtain an LM hash from a string is:

1. Convert all lower case to upper case
2. Pad password to 14 characters with NULL characters
3. Split the password to two 7 character chunks
4. Create two DES keys from each 7 character chunk
5. DES encrypt the string "KGS!@#$%" with these two chunks
6. Concatenate the two DES encrypted strings. This is the LM hash.


### Cracking

We can crack these hashes using jth:

    john --format=lm hash.txt

or hashcat:

    hashcat -m 3000 -a 3 hash.txt

## NTHash (or NTLM)

NTHash represents how modern Windows systems store passwords.
These are the hashes we use to perform Pass-The-Hash attacks.

These hashes can be obtained:
- dumping the SAM database on a workstation;
- dumping the NTDS file on the Domain Controllers;
- using mimikatz;

Usually people refer to this hash as the NTLM hash (or just NTLM), which is
misleading, as Microsoft refers to this as the NTHash.


The algorithm to obtain an NTHash from a string is:
1. Encode the string in UTF-16-LE (that is, the little endian UTF-16);
2. Compute the MD4 hash of the string obtained at point 1;


### Cracking

We can crack these hashes using jth:

    john --format=nt hash.txt

or hashcat:

    hashcat -m 1000 -a 3 hash.txt


## NTLMv1 (or Net-NTLMv1)

The NTLM protocol uses the NTHash in a challenge/response between a
server and a client. The v1 of the protocol uses both the NT and LM hash,
depending on configuration and what is available.


We can obtain these challenge/response between two endpoints:
- by using responder

The algorithm used to perform the challenge/response mechanism is:
- C = 8-byte server challenge, random
- K1 | K2 | K3 = LM/NT-hash | 5-bytes-0
- response = DES(K1,C) | DES(K2,C) | DES(K3,C)

### Cracking

We can crack these hashes using jth:

    john --format=netntlm hash.txt

or hashcat:

    hashcat -m 5500 -a 3 hash.txt


## NTLMv2 (or Net-NTLMv2)

This is the new and improved version of the NTLM protocol, which makes
it a bit harder to crack. The concept is the same as NTLMv1, only
different algorithm and responses sent to the server. Also captured
through Responder or similar. Default in Windows since Windows 2000.

We can obtain these challenge/response between two endpoints:
- by using responder

The algorithm used to perform the challenge/response mechanism is:
- SC = 8-byte server challenge, random
- CC = 8-byte client challenge, random
- CC* = (X, time, CC2, domain name)
- v2-Hash = HMAC-MD5(NT-Hash, user name, domain name)
- LMv2 = HMAC-MD5(v2-Hash, SC, CC)
- NTv2 = HMAC-MD5(v2-Hash, SC, CC*)
- response = LMv2 | CC | NTv2 | CC*


### Cracking

We can crack these hashes using jth:

    john --format=netntlmv2 hash.txt

or hashcat:

    hashcat -m 5600 -a 3 hash.txt


