# find
# Remember that:
# - `-name`  is for case-sensitive search
# - `-iname` is for case-INsensitive search
# Basic syntax:
# find <where> <what>
# It is useful to redirect errors with 2>/dev/null

# Specifying size of a file
# The size of a file is specified with the -size flag. When using
# numerical values, the formats -n, +n, and n can be used, where n is a
# number. 
# -n matches values lesser than n,
# +n matches values greater than n, 
# n matches values exactly n.
# To specify a size, you also need a suffix. c is the suffix for bytes,
# k for KiB's, and M for MiB's. So, if you want to specify a size less
# than 30 bytes, the argument -30c should be used.

# Specifying permissions
# The -perm flag is used to specify permissions, either in octal
# form (ex. 644) or in symbolic form (ex. u=r). See here for a short
# reference. If you specify the permission mode as shown above (ex. 644 or
# u=r), then find will only return files with those permissions exactly. You
# can use the – or / prefix to make your search more inclusive. Using the
# – prefix will return files with at least the permissions you specify;
# this means that the -444 mode will match files that are readable by
# everyone, even if someone also has write and/or execute permissions. Using
# the / prefix will return files that match any of the permissions you have
# set; this means that the /666 mode will match files that are readable
# and writeable by at least one of the groups (owner, group, or others).

# Specifying time
#  time-related are more complex but may
#  prove useful. The flag consists of a word and a prefix. The words are
#  min and time, for minutes and days, respectively. The prefixes are a, m,
#  and c, and are used to specify when a file was last accessed, modified,
#  or had its status changed. As for the numerical values, the same rules of
#  the -size flag apply, except there is no suffix. To put it all together:
#  in order to specify that a file was last accessed more than 30 minutes
#  ago, the option -amin +30 is used. To specify that it was modified less
#  than 7 days ago, the option -mtime -7 is used. (Note: when you want to
#  specify that a file was modified within the last 24 hours, the option
#  -mtime 0 is used.)

# Find all regular files who contain in their name the word "exploit"
find / -type f -name *exploit*

# Find files by case-insensitive extension (ex: .jpg, .JPG, .jpG)
find . -iname "*.jpg"

# Find files named <randomstring>-00-music-<randomstring>-<artist>-2000.mp3 (case insensitive)
find . -iname "*-00-music-*-*-2000.mp3"

# Find all directories
find . -type d

# Find all regular files
find . -type f

# Find all files owned by the user "kittycat"
find / -type f -user kittycat

# Find all files that are exactly 150 bytes in size
find / -type f -size n 150

# Find all files in the /home directory (recursive) with size less than 2 KiB’s and extension ".txt"
find /home -type f -size -2k -name *.txt

# Find all files that are exactly readable and writeable by the owner, and readable by everyone else (octal format)
find / -type f -perm 644

# Find all files that are only readable by anyone (use octal format)
find / -type f -perm 444

# Find all files with write permission for "others" with extension ".sh" (symbolic format)
find / -type f -perm o=w -name *.sh

# Find all files in the /usr/bin directory that are owned by root and have at least the SUID permission (symbolic format)
find /usr/bin -type f -user root -perm u=s

# Find all files that were not accessed in the last 10 days with extension ".png"
find / -type f -atime +10 -name *.png

# Find all files in the /usr/bin directory (recursive) that have been modified within the last 2 hours
find /usr/bin -type f -mmin -120

# Find files matching a string/regex
find . | grep -i '<regex here>'

# Find string/regex within files found
find . | grep -nir '<regex here>'

# Find a file but exclude the paths starting with ./tmp/ and ./scripts/
find . -type f -iname "*_lesson.txt" ! -path "./tmp/*" ! -path "./scripts/*"

# Find files by octal permission
find . -type f -perm 777

# Find files with setuid bit set
find . -xdev \( -perm -4000 \) -type f -print0 | xargs -0 ls -l

# Find files with extension '.txt' and remove them
find ./path/ -iname '*.txt' -exec rm '{}' \;

# To find files with extension '.txt' and look for a string into them
find ./path/ -iname '*.txt' | xargs grep 'string'

# To find files with size bigger than 5 Mebibyte and sort them by size
find . -size +5M -type f -print0 | xargs -0 ls -Ssh | sort -z

# To find files bigger than 2 Megabyte and list them
find . -type f -size +200000000c -exec ls -lh {} \; | awk '{ print $9 ": " $5 }'

# To find files modified more than 7 days ago and list file information
find . -type f -mtime +7d -ls

# To find symlinks owned by a user and list file information
find . -type l --user=<username> -ls

# To search for and delete empty directories
find . -type d -empty -exec rmdir {} \;

# To search for directories named build at a max depth of 2 directories
find . -maxdepth 2 -iname build -type d

# To search all files who are not in .git directory
find . ! -iwholename '*.git*' -type f

# To find all files that have the same node (hard link) as MY_FILE_HERE
find . -type f -samefile MY_FILE_HERE 2>/dev/null

# To find all files in the current directory and modify their permissions
find . -type f -exec chmod 644 {} \;

# To find all directories in the current directory and modify their permissions
find . -type d -exec chmod 755 {} \;

# Find all files and compute checksum but exclude the paths /dev /proc /sys 
find / \( -path /dev -prune -o \
          -path /proc -prune -o \
          -path /sys -prune \
          \) \
         -o -printf '%p ' -exec cksum {} \;

# Find by using regex all files ending with ".mddd"
;; This is a match on the whole path, not a search.
;; For example, to match a file named './fubar3',
;; you can use  the regular expression '.*bar.' or '.*b.*3', but not 'b.*r3'.
find . -type f -regextype posix-extended -regex '.*\.md{3}' 


# Execute Process once for each file (e.g., mv)
find . -name \*.txt -exec mv {} {}.bak \;

# Execute Process once with all the files as arguments (e.g., use with sed):
find . -name \*.txt -exec sed -i.bak 's/a/B/g' {} +

# Use files found with find in a bash loop
;; IFS= makes sure it doesn't trim leading and trailing whitespace
;; -r prevents interpretation of \ escapes.
find . -iname "*.txt"  > files
while IFS= read -r line; do 
     process "$line"
done < files

# Use files found with find in a bash loop (v2)
find . -name '*.txt' -print0 | 
while IFS= read -r -d '' line; do 
    process "$line"
done

# Use files found and apply operation
;; using xargs with arguments after each filename (implies one run per filename)
;; where command is the program we want to launch on the files
find . -name \*.txt -print0 | xargs -0 -I{} command {} argument
