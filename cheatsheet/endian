# endian-ness

# A bit of theory
Endian-ness of a system determines how bytes stored or arriving at a
computer should be read.  The two main kinds of endian-ness are:
- Big Endian    (also known as "network byte order"):
    Mostly used by most (but not all) network protocols
    (e.g., IP, TCP, UDP)
- Little Endian:
    Mostly used by most (but not all) CPUs and associated memory.

File formats can use any order, also a mixture of both.

Historically, various methods of endianness have been used in computing,
including exotic forms such as middle-endianness. Today, however, big-endianness
is the dominant ordering in many networking protocols (IP, TCP, UDP). Conversely,
little-endianness is the dominant ordering for processor architectures (x86,
most ARM implementations) and their associated memory.


As an example, the sequence of bytes '0a 0b 0c 0d' becomes:
- big    endian: '0a 0b 0c 0d'
- little endian: '0d 0c 0b 0a'
- middle endian: '0b 0a 0d 0c'

Note that when interpreting a binary sequence, e.g., a network protocol
being little endian does not mean we should reverse the entire sequence
of bytes in a packet, but we should reverse part by part. For example
let's say that a specific network protocol is using little endian
and the following sequence of bytes should be sent:

    0a 0b       0c 0d
    field1      field2

In this case in order to convert these two fields in little endian
we would get:

    0b 0a       0d 0c
    field1      field2

An example of network protocol using little endian is SMB and other
Microsoft protocols.

# To check out byteorder on GNU/Linux
lscpu | grep -i order
printf '\1' | od -dAn # prints 1 for little-endian and 256 for big-endian

# To check out byteorder on systems with dpkg
dpkg-architecture | grep -i end

# To check out byteorder of a machine with perl
## (if it starts with 1.. -> little endian)
perl -e 'use Config; print $Config{byteorder}'

# To check out byteorder of a machine with python
## (if it prints 'little' -> little endian)
python -c 'from sys import byteorder;print(byteorder)'

# To check out byteorder of a machine with C
int main() { 
    union {
        int i;
        char c[sizeof(int)];
    } x;
    x.i = 1;
    if(x.c[0] == 1) printf("little-endian\n");
    else printf("big-endian\n");
}

