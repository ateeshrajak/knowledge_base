# FIX THIS PART UNTIL ------------------------------
# OpenSSL

Citing `man openssl`:

The openssl program is a command line tool for using the various cryptography functions of OpenSSL's crypto library from the shell.  It can be used for

* Creation and management of private keys, public keys and parameters
* Public key cryptographic operations
* Creation of X.509 certificates, CSRs and CRLs
* Calculation of Message Digests
* Encryption and Decryption with Ciphers
* SSL/TLS Client and Server Tests
* Handling of S/MIME signed or encrypted mail
* Time Stamp requests, generation and verification


## Asymmetric Cryptography

We can generate a private key by doing:
```sh
openssl genrsa -out private-key.pem 8196
# this will generate an RSA private key of 8196 bits
```

from this key we can extract the public key by doing:
```sh
openssl rsa -in private-key.pem -out public-key.pem -outform PEM -pubout
# we are extracting the public key from the private key
```

Now given a file called "text.txt" we can encrypt it by using the public key by
doing:

```sh
openssl rsautl -encrypt -inkey public-key.pem -pubin -in file.txt -out file.txt.rsa
# we are encrypting the file called file.txt by using the public key
```

To decrypt it we can use the private key by doing:
```sh
openssl rsautl -decrypt -inkey private-key.pem -in file.txt.rsa -out file.txt.dec
# we are decrypting the encrypted file.txt.rsa file by using our private key
```


## Encrypt/Decrypt a file

To encrypt a file we can do:
```sh
openssl enc -aes-256-cbc -salt -in super_secret.pdf -out encrypted_output.enc
```


To decrypt a file we can do:
```sh
openssl enc -aes-256-cbc -d -in esl.enc -out es2l.pdf
```

Or 

```sh
openssl aes-256-cbc -in enrypted_file.enc -out result.txt -d -pass 
```


## Generate a Certificate

In order to generate a certificate we can do:
```sh
openssl genrsa -out "$HOME/.purp/ca.key" 2048
openssl req -new -x509 -days 3650 -key "$HOME/.purp/ca.key" -out "$HOME/.purp/ca.crt" -subj "/CN=proxy CA"
openssl genrsa -out "$HOME/.purp/cert.key" 2048
```




NOTE:
In order to decrypt a file in OpenSSL 1.0.1t generated by OpenSSL 1.1.0 you
should add "-md sha256" to your command line arguments. If that is not possible
then you can also force OpenSSL 1.1.0 to use md5 as its digest by adding "-md
md5" to the encryption command line arguments. This is obviously insecure but
should work.



-----------------------------------------
# To create a 2048-bit private key:
openssl genrsa -out server.key 2048

# To create the Certificate Signing Request (CSR):
openssl req -new -key server.key -out server.csr

# To sign a certificate using a private key and CSR:
openssl x509 -req -days 365 -in server.csr -signkey server.key -out server.crt

# (The above commands may be run in sequence to generate a self-signed SSL certificate.)

# To show certificate information for a certificate signing request
openssl req -text -noout -in server.csr

# To show certificate information for generated certificate
openssl x509 -text -noout -in server.crt 

# To get the sha256 fingerprint of a certificate
openssl x509 -in server.crt -noout -sha256 -fingerprint

# To view certificate expiration:
echo | openssl s_client -connect <hostname>:443 2> /dev/null | \
awk '/-----BEGIN/,/END CERTIFICATE-----/' | \
openssl x509 -noout -enddate

# To generate Diffie-Hellman parameters:
openssl dhparam -outform PEM -out dhparams.pem 2048


